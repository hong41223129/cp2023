var tipuesearch = {"pages": [{'title': 'about', 'text': 'https://github.com/mdecycu/cmsite \n https://github.com/hong41223129/cp2023 (個人倉儲) \n https://github.com/hong41223129/cp2023_ag4 (團體倉儲) \n \n', 'tags': '', 'url': 'about.html'}, {'title': 'W2~W4', 'text': '採用 Github Classroom 建立作業倉儲的問題: \n (補充說明: \xa0 儘管無法透過 Replit Account 下的 Connect 讓使用者自行將 Github Classroom 取得的倉儲設定 Applilcation 授權, 但仍可由各 user 自行利用 ssh-keygen 建立 .ssh/id_rsa 與 id_rsa.pub, 然後利用 .ssh/config 建立 Host, User 與 Hostname, 以便透過 SSH 將 github 改版推向擁有權限的 githu 倉儲. ) \n 2023/09/26 在 1a w3 課程進行到建立各學員 site 作業時發現, 將 Replit 導入 Github 倉儲的流程中, 所產生的系統間權限設定, 必須由 Github Classroom 管理帳號 (以 cp2023 為例, 附屬在 mdecp2023 帳號下), 針對各用戶所提出的個別 Replit 權限 requests (以 site-scrum-1 倉儲為例, 只能透過 Replit 提出控管 mdecp2023/site-scrum-1 倉儲的權限) \xa0 逐一進行設定 . \n \n (上圖顯示共有三名用戶針對 mdecp2023 帳號下的 Github Classroom 倉儲提出 Replit 連線要求, 其中只有最上方用戶的 request 取得 mdecp2023/site-scrum-1 倉儲的維護權限, 其餘兩則 requests 則仍處於待審核階段. 意即若要讓各用戶整合 Replit, \xa0 每一個 Github Classroom 作業, 管理者都必須手動處理超過兩百則的 requests ) \n 為去除管理者的手動設定負擔, 決定 2023 cp 與 cad 等課程將放棄使用 Github Classroom. 改為由各學員自行針對課程建立用來評分的課程倉儲與網站 (cp 課程建立 cp2023 倉儲, cad 課程則建立 cad2023 倉儲), 直接附屬在學員的 Github 帳號下, 後續的 submodule 設定與倉儲協同權限則統一由各學員自行負責. \n', 'tags': '', 'url': 'W2~W4.html'}, {'title': 'W5', 'text': '曲線圖 gnuplot_ex1.c \xa0原始碼如下： \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n \n \n \n // 包含標準輸出入程式庫的標頭文件 \n // https://blog.csdn.net/weixin_38468077/article/details/101069365 \n // http://www.gnuplot.info/demo/ \n // https://github.com/sysprog21/rv32emu \n // https://github.com/sysprog21/semu  \n // https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3 \n // https://cs61c.org/fa23/ \n // https://greenteapress.com/wp/think-python-2e/ \n // https://github.com/ecalvadi/c99-examples \n // https://github.com/gouravthakur39/beginners-C-program-examples \n // https://github.com/ergenekonyigit/Numerical-Analysis-Examples \n // https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf \n // https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf \n // https://jsommers.github.io/cbook/cbook.pdf \n // https://jsommers.github.io/cbook/index.html \n // http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf \n // http://cslibrary.stanford.edu/101/EssentialC.pdf \n // https://publications.gbdirect.co.uk/c_book/ \n // https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf \n // ***** execute on replit  \n // cd downloads \n // cc gnuplot_ex1.c -o gnuplot_ex1 \n // ./gnuplot_ex1 \n #include <stdio.h> \n \xa0 \xa0 \n // 主函式 \n int   main() { \n \xa0\xa0\xa0\xa0 // Start a Gnuplot process using popen \n \xa0\xa0\xa0\xa0 FILE   *gnuplotPipe = popen( "gnuplot -persistent" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!gnuplotPipe) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to start Gnuplot.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Use Gnuplot plotting commands, specify font and output as PNG \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set terminal png font \'default,10\' size 800,400\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set output \'./../images/gnuplot_ex1.png\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "plot sin(x)" ); \n \xa0\xa0\xa0\xa0 // Close popen \n \xa0\xa0\xa0\xa0 pclose(gnuplotPipe); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n 執行結果位於影像： \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '日本國旗 \n 程式是使用chatGPT寫出 \n 日本國旗程式如下 \n #include <stdio.h> #include <gd.h> \n int main() {  int width = 250; // 日本国旗的宽度  int height = 150; // 日本国旗的高度 \n gdImagePtr img = gdImageCreateTrueColor(width, height); \n // 分配白色  int white = gdImageColorAllocate(img, 255, 255, 255);  gdImageFill(img, 0, 0, white); \n // 分配红色  int red = gdImageColorAllocate(img, 255, 0, 0); \n // 启用抗锯齿  gdImageSetAntiAliased(img, red); \n // 绘制红色圆圈  int circle_radius = 80; // 减小半径以使边缘更圆润  int circle_x = width / 2;  int circle_y = height / 2;  gdImageFilledEllipse(img, circle_x, circle_y, circle_radius, circle_radius, red); \n FILE *outputFile = fopen("japan_flag_smooth.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  } \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n \n \n 美國國旗 \n 美國國旗程式碼如下 \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n void   draw_usa_flag(gdImagePtr img); \n void   draw_star(gdImagePtr img,  int   x,  int   y,  int   size,  int   color,  double   rotation_angle); \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   width = 800; \n \xa0\xa0\xa0\xa0 int   height = ( int )(width / 1.9); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \n \xa0\xa0\xa0\xa0 draw_usa_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "./../images/usa_flag.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "打开输出文件时出错。\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \xa0 \n void   draw_usa_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int   width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int   height = gdImageSY(img); \n \xa0\xa0\xa0\xa0 int   red, white, blue; \n \xa0\xa0\xa0\xa0 // 国旗颜色 \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 178, 34, 52);  // 红色条纹 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255);  // 白色条纹 \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 60, 59, 110);  // 蓝色矩形 \n \xa0 \n \xa0\xa0\xa0\xa0 int   stripe_height = height / 13; \n \xa0\xa0\xa0\xa0 int   stripe_width = width; \n \xa0\xa0\xa0\xa0 int   star_size = ( int )(0.0308 * height);  // 星星大小 \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   y = 0; y < height; y += stripe_height) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (y / stripe_height % 2 == 0) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }  else   { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue); \n \xa0 \n \xa0\xa0\xa0\xa0 int   star_spacing_x = ( int )(0.129 * height);  // 横向星星之间的间距 \n \xa0\xa0\xa0\xa0 int   star_spacing_y = ( int )(0.054 * height);  // 纵向星星之间的间距 \n \xa0\xa0\xa0\xa0 int   star_start_x = ( int )(0.125 * height);  // 星星的起始X位置 \n \xa0\xa0\xa0\xa0 int   star_start_y = ( int )(0.0485 * height);  // 星星的起始Y位置 \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   row = 0; row < 9; row++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   starsPerRow = (row % 2 == 0) ? 6 : 5; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 计算2、4、6和8排星星的偏移量 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   ( int   star = 0; star < starsPerRow; star++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   x = star_start_x + star * star_spacing_x + offset_x; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 旋转角度（以弧度为单位） \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double   rotation_angle = M_PI / 5;  // 忘記多少度的旋转 \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   y = star_start_y + row * star_spacing_y; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 draw_star(img, x, y, star_size, white, rotation_angle); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n } \n \xa0 \n void   draw_star(gdImagePtr img,  int   x,  int   y,  int   size,  int   color,  double   rotation_angle) { \n \xa0\xa0\xa0\xa0 gdPoint points[10]; \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < 10; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double   angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   radius = (i % 2 == 0) ? size : size / 2; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].x = x + radius *  cos (angle); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].y = y + radius *  sin (angle); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // 用指定的颜色填充星星 \n \xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points, 10, color); \n } \n \n \n \n \n \n \n \n \n 結果如下 \n \n 台灣國旗 \n roc_flag_in_gd.c \xa0原始碼如下 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n 108 \n 109 \n 110 \n 111 \n 112 \n 113 \n 114 \n 115 \n 116 \n 117 \n 118 \n 119 \n 120 \n 121 \n 122 \n \n \n \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China \n // 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 \n // cc roc_flag_in_gd.c -lgd -lm to link with gd and math library \n // https://www.rapidtables.com/web/color/RGB_Color.html \n // 幾何形狀著色與繪圖練習 \n // 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n void   draw_roc_flag(gdImagePtr img); \n void   draw_white_sun(gdImagePtr img,  int   x,  int   y,  int   size,  int   color); \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 // width 3: height 2 \n \xa0\xa0\xa0\xa0 int   width = 1200; \n \xa0\xa0\xa0\xa0 // 國旗長寬比為 3:2 \n \xa0\xa0\xa0\xa0 int   height = ( int )(width*2.0 / 3.0); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \n \xa0\xa0\xa0\xa0 draw_roc_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "./../images/roc_flag_in_gd.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0\xa0\xa0\xa0 return   0; \n } \n \xa0 \n void   draw_roc_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int   width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int   height = gdImageSY(img); \n \xa0\xa0\xa0\xa0 int   red, white, blue; \n \xa0\xa0\xa0\xa0 // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 \n \xa0\xa0\xa0\xa0 int   center_x = ( int )(width/4); \n \xa0\xa0\xa0\xa0 int   center_y = ( int )(height/4); \n \xa0\xa0\xa0\xa0 // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 \n \xa0\xa0\xa0\xa0 // 由於中央白日圓形的半徑為青天寬度的 1/8 \n \xa0\xa0\xa0\xa0 // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 \n \xa0\xa0\xa0\xa0 // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 \n \xa0\xa0\xa0\xa0 int   sun_radius = ( int )(width/8); \n \xa0\xa0\xa0\xa0 // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 \n \xa0\xa0\xa0\xa0 int   white_circle_dia = sun_radius; \n \xa0\xa0\xa0\xa0 // 中央藍色圓形半徑為中央白日的 1又 2/15 \n \xa0\xa0\xa0\xa0 int   blue_circle_dia = white_circle_dia +\xa0 white_circle_dia*2/15; \n \xa0\xa0\xa0\xa0 // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 255, 0, 0);  // 紅色 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255);  // 白色 \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 0, 0, 149);  // 藍色 \n \xa0\xa0\xa0\xa0 // 根據畫布大小塗上紅色長方形區域 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, red); \n \xa0\xa0\xa0\xa0 // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, ( int )(width/2.0), ( int )(height/2.0), blue); \n \xa0\xa0\xa0\xa0 // 先設法以填色畫出六個白色堆疊菱形 \n \xa0\xa0\xa0\xa0 draw_white_sun(img, center_x, center_y, sun_radius, white); \n \xa0\xa0\xa0\xa0 // 利用一個藍色大圓與白色小圓畫出藍色環狀 \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n \xa0\xa0 \xa0 \n } \n \xa0 \n void   draw_white_sun(gdImagePtr img,  int   center_x,  int   center_y,  int   sun_radius,  int   color) { \n \xa0\xa0\xa0\xa0 // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位 \n \xa0\xa0\xa0\xa0 // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度 \n \xa0\xa0\xa0\xa0 float   deg = M_PI/180; \n \xa0\xa0\xa0\xa0 // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度 \n \xa0\xa0\xa0\xa0 // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小 \n \xa0\xa0\xa0\xa0 float   sr = sun_radius/ tan (75*deg); \n \xa0\xa0\xa0\xa0 int   ax, ay, bx, by, dx, dy, ex, ey; \n \xa0\xa0\xa0\xa0 gdPoint points[4]; \n \xa0\xa0\xa0\xa0 /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確 \n \xa0\xa0\xa0\xa0 ax = center_x; \n \xa0\xa0\xa0\xa0 ay = center_y - sun_radius; \n \xa0\xa0\xa0\xa0 bx = center_x - sun_radius*tan(15*deg); \n \xa0\xa0\xa0\xa0 by = center_y; \n \xa0\xa0\xa0\xa0 ex = center_x; \n \xa0\xa0\xa0\xa0 ey = center_y + sun_radius; \n \xa0\xa0\xa0\xa0 dx = center_x + sun_radius*tan(15*deg); \n \xa0\xa0\xa0\xa0 dy = center_y; \n \xa0\xa0\xa0\xa0 // AB \n \xa0\xa0\xa0\xa0 gdImageLine(img, ax, ay, bx, by, color); \n \xa0\xa0\xa0\xa0 // BE \n \xa0\xa0\xa0\xa0 gdImageLine(img, bx, by, ex, ey, color); \n \xa0\xa0\xa0\xa0 // ED \n \xa0\xa0\xa0\xa0 gdImageLine(img, ex, ey, dx, dy, color); \n \xa0\xa0\xa0\xa0 // DA \n \xa0\xa0\xa0\xa0 gdImageLine(img, dx, dy, ax, ay, color); \n \xa0\xa0\xa0\xa0 */ \n \xa0\xa0\xa0\xa0 ax = center_x; \n \xa0\xa0\xa0\xa0 ay = center_y - sun_radius; \n \xa0\xa0\xa0\xa0 bx = center_x - sun_radius* tan (15*deg); \n \xa0\xa0\xa0\xa0 by = center_y; \n \xa0\xa0\xa0\xa0 ex = center_x; \n \xa0\xa0\xa0\xa0 ey = center_y + sun_radius; \n \xa0\xa0\xa0\xa0 dx = center_x + sun_radius* tan (15*deg); \n \xa0\xa0\xa0\xa0 dy = center_y; \n \xa0\xa0\xa0\xa0 // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域 \n \xa0\xa0\xa0\xa0 for   ( int   i=1;i<=6;i++){ \n \xa0\xa0\xa0\xa0 // A \n \xa0\xa0\xa0\xa0 points[0].x = ax+sun_radius* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 points[0].y = ay+sun_radius-sun_radius* cos (30*deg*i); \n \xa0\xa0\xa0\xa0 // B \n \xa0\xa0\xa0\xa0 points[1].x = bx+sr-sr* cos (30*deg*i); \n \xa0\xa0\xa0\xa0 points[1].y = by-sr* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 // E \n \xa0\xa0\xa0\xa0 points[2].x = ex-sun_radius* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 points[2].y = ey-(sun_radius-sun_radius* cos (30*deg*i)); \n \xa0\xa0\xa0\xa0 // D \n \xa0\xa0\xa0\xa0 points[3].x = dx-(sr-sr* cos (30*deg*i)); \n \xa0\xa0\xa0\xa0 points[3].y = dy+sr* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 // 對菱形區域範圍塗色 \n \xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points, 4, color); \n \xa0\xa0\xa0\xa0 // 在菱形區域外圍畫線, 明確界定菱形範圍 \n \xa0\xa0\xa0\xa0 gdImagePolygon(img, points, 4, color); \n \xa0\xa0\xa0\xa0 } \n } \n \n \n \n \n \n \n 結果如下 \n \n 中國國旗 \n #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_chinese_flag(gdImagePtr img); \n int main() {  int width = 300; // 國旗寬度  int height = 200; // 國旗高度 \n gdImagePtr im = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(im, 0); \n draw_chinese_flag(im); \n FILE *outputFile = fopen("./../images/proc_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "打开输出文件时出错。\\n");  return 1;  } \n gdImagePngEx(im, outputFile, 9);  fclose(outputFile);  gdImageDestroy(im); \n return 0; } \n // 声明 draw_star 函数 void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n void draw_chinese_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, yellow; \n // 國旗顏色  red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景  yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星 \n // 畫紅色背景  gdImageFilledRectangle(img, 0, 0, width, height, red); \n // 設置星星的大小和位置  int star_size = (int)(0.28 * height);  int star_x = (int)(0.165 * width);  int star_y = (int)(0.265 * height); \n // 畫大星星  draw_star(img, star_x, star_y, star_size, yellow, 11.0); \n // 繪製小星星，位置根據實際國旗比例計算  double radius = 0.15 * height;  double angle = 360 / 7 * M_PI / 179.0;  double rotation = -M_PI / 7.5;  int cx = (int)(0.32 * width);  int cy = (int)(0.27 * height); \n for (int i = -1; i < 3; i++) {  int x = (int)(cx + radius * cos(i * angle + rotation));  int y = (int)(cy + radius * sin(i * angle + rotation));  draw_star(img, x, y, 19, yellow, M_PI / 5.0);  } } \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {  gdPoint points[10]; \n // 计算星形的五个外点和五个内点  double outer_radius = size / 2;  double inner_radius = size / 6;  double angle = M_PI / 5.0; \n for (int i = 0; i < 10; i++) {  double radius = (i % 2 == 0) ? outer_radius : inner_radius;  double theta = rotation_angle + i * angle;  points[i].x = x + radius * cos(theta);  points[i].y = y + radius * sin(theta);  } \n // 使用 gdImageFilledPolygon 绘制星形  gdImageFilledPolygon(img, points, 10, color); } \n 韓國國旗 \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \xa0 \n #define WIDTH 900 \n #define HEIGHT 600 \n #define FILENAME "south_korea_flag.png" \n \xa0 \xa0 \n int main() { \n \xa0\xa0\xa0\xa0 gdImagePtr im; \n \xa0\xa0\xa0\xa0 FILE *pngout; \n \xa0\xa0\xa0\xa0 int white, black, red, blue; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 im = gdImageCreate(WIDTH, HEIGHT); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(im, 255, 255, 255); \n \xa0\xa0\xa0\xa0 black = gdImageColorAllocate(im, 0, 0, 0); \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(im, 205, 0, 0); \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(im, 0, 56, 168); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Background (white) \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Blue Circle (Yin-Yang Symbol) \n \xa0\xa0\xa0\xa0 gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Red Circle (Yin-Yang Symbol) \n \xa0\xa0\xa0\xa0 gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc); \n \xa0 \xa0 \n \xa0\xa0 int circleX = 385;\xa0\xa0\xa0  // 圓心的 X 座標 \n \xa0\xa0 int circleY = 262.5;\xa0\xa0  // 圓心的 Y 座標 \n \xa0\xa0 int circleRadius = 75;\xa0\xa0\xa0\xa0  \n \xa0 \xa0 \n \xa0\xa0 // 繪製圓形 \n \xa0\xa0 gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red); \n \xa0 \xa0 \n \xa0\xa0 int circleX2 = 515;\xa0\xa0\xa0  // 圓心的 X 座標 \n \xa0 \xa0 \n \xa0 int circleY2 = 337.5; \n \xa0 \xa0 \n \xa0\xa0 // 繪製圓形 \n \xa0\xa0 gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue); \n \xa0 \xa0 \n \xa0\xa0 { \n \xa0 \xa0 \n \xa0 \xa0 \n \xa0\xa0 // 起點和終點位置 \n \xa0 \xa0 \n \xa0\xa0 int startX = 340;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY = 90;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX = 200;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY = 260;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black); \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black); \n \xa0 \xa0 \n \xa0\xa0 int startX2 = 213;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY2 = 270;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX2 = 133;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY2 = 210;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth ); \n gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +12); \n gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white); \n } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \xa0 \n \xa0\xa0 int startX = 330;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY = 520;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX = 190;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY = 350;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black); \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black); \n \xa0 \xa0 \n \xa0\xa0 int startX2 = 213;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY2 = 330;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX2 = 133;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY2 = 390;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth ); \n gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +14); \n gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 232, 426, 206, 448, white); \n \xa0 \xa0 \n \xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \xa0 \n \xa0\xa0 int startX = 564;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY = 520;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX = 704;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY = 350;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black); \n \xa0 \xa0 \n gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 624, 400, 734, 490, white); \n \xa0 \xa0 \n \xa0\xa0 int startX2 = 553;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY2 = 330;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX2 = 633;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY2 = 390;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +30); \n gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white); \n \xa0\xa0 } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \xa0 \n \xa0\xa0 int startX = 330;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY = 520;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX = 190;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY = 350;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black); \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black); \n \xa0 \xa0 \n \xa0\xa0 int startX2 = 213;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY2 = 330;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX2 = 133;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY2 = 390;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth ); \n gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +14); \n gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 232, 426, 206, 448, white); \n \xa0 \xa0 \n \xa0\xa0 } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \xa0 \n \xa0\xa0 int startX = 564;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY = 97;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX = 704;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY = 267;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 624, 212, 734, 118, white); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black); \n \xa0 \xa0 \n \xa0\xa0 int startX2 = 553;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int startY2 = 277;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int endX2 = 633;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \xa0 \n \xa0\xa0 int endY2 = 217;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \xa0 \n \xa0\xa0 int lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white); \n \xa0 \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth +30); \n gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white); \n \xa0 \xa0 \n \xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Save image \n FILE *outputFile = fopen( "./../images/korea_flag.png" ,  "wb" ); \n if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0 fprintf(stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0 return   1; \n } \n \xa0\xa0 gdImagePngEx(im, outputFile, 9); \n \xa0\xa0\xa0\xa0\xa0\xa0 fclose(outputFile); \n \xa0\xa0\xa0\xa0\xa0\xa0 gdImageDestroy(im); \n \xa0\xa0\xa0\xa0\xa0\xa0 return   0; \n \xa0\xa0 } \n \n 英國國旗 \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n 108 \n 109 \n 110 \n 111 \n 112 \n 113 \n 114 \n 115 \n 116 \n 117 \n 118 \n 119 \n 120 \n 121 \n 122 \n 123 \n 124 \n 125 \n 126 \n 127 \n 128 \n 129 \n 130 \n 131 \n 132 \n 133 \n 134 \n 135 \n 136 \n 137 \n 138 \n \n \n \n #include < stdio.h > \n #include < gd.h > \n #include < math.h > \n \xa0 \n void draw_uk_flag(gdImagePtr img); \n void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color); \n \xa0 \n int main() { \n \xa0\xa0\xa0\xa0 // 设置国旗的宽和高 \n \xa0\xa0\xa0\xa0 int width = 1200; \n \xa0\xa0\xa0\xa0 int height = width / 2; \n \xa0 \n \xa0\xa0\xa0\xa0 // 创建图像 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制英国国旗 \n \xa0\xa0\xa0\xa0 draw_uk_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 // 将图像保存到文件 \n \xa0\xa0\xa0\xa0 FILE *outputFile = fopen("./../images/uk_flag.png", "wb"); \n \xa0\xa0\xa0\xa0 if (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf(stderr, "打开输出文件时发生错误。\\n"); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return 1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose(outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0\xa0\xa0\xa0 return 0; \n } \n \xa0 \n \xa0 \n \xa0 \n void draw_uk_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int height = gdImageSY(img); \n \xa0 \n \xa0\xa0\xa0\xa0 int red, white, blue; \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 204, 0, 0);\xa0\xa0\xa0\xa0\xa0\xa0 // 红色 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255); // 白色 \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 0, 0, 153);\xa0\xa0\xa0\xa0\xa0 // 蓝色 \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, blue); \n \xa0 \n \xa0 \n \xa0\xa0 int x1, y1, x2, y2, x3, y3; \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 int line_thickness = 100; \n \xa0\xa0\xa0\xa0 gdImageSetThickness(img, line_thickness); \n \xa0 \n \xa0\xa0\xa0\xa0 int x1, y1, x2, y2, x3, y3; \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制白色斜线 \n \xa0\xa0\xa0\xa0 x1 = 0; \n \xa0\xa0\xa0\xa0 y1 = 600; \n \xa0\xa0\xa0\xa0 x2 = 1200; \n \xa0\xa0\xa0\xa0 y2 = 0; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 0; \n \xa0\xa0\xa0\xa0 y1 = 0; \n \xa0\xa0\xa0\xa0 x2 = 1200; \n \xa0\xa0\xa0\xa0 y2 = 600; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 int line_thickness = 33; \n \xa0\xa0\xa0\xa0 gdImageSetThickness(img, line_thickness); \n \xa0 \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制红色斜线 \n \xa0\xa0\xa0\xa0 x1 = 566; \n \xa0\xa0\xa0\xa0 y1 = 300; \n \xa0\xa0\xa0\xa0 x2 = 1166; \n \xa0\xa0\xa0\xa0 y2 = 0; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 1233; \n \xa0\xa0\xa0\xa0 y1 = 600; \n \xa0\xa0\xa0\xa0 x2 = 633; \n \xa0\xa0\xa0\xa0 y2 = 300; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 566; \n \xa0\xa0\xa0\xa0 y1 = 300; \n \xa0\xa0\xa0\xa0 x2 = -33; \n \xa0\xa0\xa0\xa0 y2 = 0; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 600; \n \xa0\xa0\xa0\xa0 y1 = 316.5; \n \xa0\xa0\xa0\xa0 x2 = 0; \n \xa0\xa0\xa0\xa0 y2 = 616.5; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0\xa0 } \n \xa0\xa0 { \n \xa0\xa0 int line_thickness = 33; \n \xa0\xa0 gdImageSetThickness(img, line_thickness); \n \xa0 \n \xa0\xa0 int x1, y1, x2, y2, x3, y3; \n \xa0 \n \xa0\xa0 // 绘制\xa0 斜线 \n \xa0\xa0 x1 = 0; \n \xa0\xa0 y1 = 600; \n \xa0\xa0 x2 = 1200; \n \xa0\xa0 y2 = 0; \n \xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red ); \n \xa0 \n \xa0 \n \xa0\xa0 x1 = 1200; \n \xa0\xa0\xa0\xa0 y1 = 16.5; \n \xa0\xa0\xa0\xa0 x2 = 600; \n \xa0\xa0\xa0\xa0 y2 = 316.5; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n \xa0 \n \xa0 \n \xa0\xa0 x1 = 0; \n \xa0\xa0\xa0\xa0 y1 = 583.5; \n \xa0\xa0\xa0\xa0 x2 = 600; \n \xa0\xa0\xa0\xa0 y2 = 283.5; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n \xa0 \n \xa0 \n \xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制白色十字 \n \xa0\xa0\xa0\xa0 int cross_width = width / 32; \n \xa0\xa0\xa0\xa0 int cross_arm_width = width / 32; \n \xa0\xa0\xa0\xa0 int center_x = width / 2; \n \xa0\xa0\xa0\xa0 int center_y = height / 2; \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white); \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制红色十字 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red); \n } \n \n \n \n \n \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W10', 'text': '線上簡報、網誌與多媒體影片製作工具: \n Leo Editor \xa0 ( 討論群組 ) 為大綱管理系統, 可以當作程式開發的 IDE (Integrated Development Environment) 使用, 可用來編輯 reveal.js 簡報檔案中的 html 與 markdown, 也可用來編輯 Pelican 網誌 markdown 與轉檔, 並且在電腦輔助設計與分析過程中, 可以用來解讀 CoppeliaSim XML 格式檔案. \n 因為 Python 3.12.0 環境下 Leo Editor 還無法正常透過 pip 安裝, 因此必須手動安裝 PyQt5 之後, 再使用 pip install leo, 所完成的 Python 3.12.0:\xa0 Python312_leo_664_PyQt5.7z \xa0 (需要下載密碼) \n Wink \xa0 為操作流程影片製作套件, 可以在電腦操作過程, 儲存關鍵頁面與滑鼠點擊區域後, 加上輔助文字說明後製作成 mp4 影片檔. \n ShareX \xa0 為螢幕畫面取像或錄影套件, 可以擷取電腦畫面任一區域存為影像檔, 或者結合語音說明與滑鼠操作錄製說明影片. \n OBS \xa0 為電腦廣播製作系統, 可以結合各種語音、圖像與影片製作出多元的電腦操作說明影片. \n Wink 與 ShareX 都需要 \xa0 ffmpeq.exe . \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W12', 'text': '#include <stdio.h> #include <gd.h> #include <math.h> \n // Declare the rotation function void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {  int i;  double angle_rad = rotation_ang * M_PI / 180.0; \n for (i = 0; i < num_points; i++) {  int x = points[i].x - x_orig;  int y = points[i].y - y_orig; \n points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));  points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));  } } \n int main() {  int width = 800;  int height = 600; \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n FILE *outputFile = fopen("hellogd1.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  } \n int red = gdImageColorAllocate(img, 255, 0, 0);  int blue = gdImageColorAllocate(img, 0, 0, 255);  int black = gdImageColorAllocate(img, 0, 0, 0);  int white = gdImageColorAllocate(img, 255, 255, 255); \n gdImageFilledRectangle(img, 0, 0, width, height, white);  gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue); \n gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);  gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);  gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue); \n gdPoint points[4];  points[0].x = (int)width / 4;  points[0].y = (int)height * 3 / 4;  points[1].x = points[0].x + 100;  points[1].y = points[0].y;  points[2].x = points[1].x;  points[2].y = points[1].y + 100;  points[3].x = points[2].x - 100;  points[3].y = points[2].y; \n // Call the rotation function  rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 45.0, points, 4);  gdImagePolygon(img, points, 4, black); \n gdPoint points2[4];  points2[0].x = (int)width / 3;  points2[0].y = (int)height / 2;  points2[1].x = points2[0].x + 100;  points2[1].y = points2[0].y;  points2[2].x = points2[1].x;  points2[2].y = points2[1].y + 100;  points2[3].x = points2[2].x - 150;  points2[3].y = points2[2].y; \n // Call the rotation function  rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);  gdImageFilledPolygon(img, points2, 4, red); \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n \n #include <stdio.h> #include <gd.h> #include <math.h> \n // Declare the rotation function void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {  int i;  double angle_rad = rotation_ang * M_PI / 180.0; \n for (i = 0; i < num_points; i++) {  int x = points[i].x - x_orig;  int y = points[i].y - y_orig; \n points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));  points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));  } } \n int main() {  int width = 800;  int height = 600; \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n FILE *outputFile = fopen("hellogd2.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  } \n int red = gdImageColorAllocate(img, 255, 0, 0);  int blue = gdImageColorAllocate(img, 0, 0, 255);  int black = gdImageColorAllocate(img, 0, 0, 0);  int white = gdImageColorAllocate(img, 255, 255, 255); \n gdImageFilledRectangle(img, 0, 0, width, height, white);  gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue); \n gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);  gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);  gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue); \n gdPoint points[4];  points[0].x = (int)width / 4;  points[0].y = (int)height * 3 / 4;  points[1].x = points[0].x + 100;  points[1].y = points[0].y;  points[2].x = points[1].x;  points[2].y = points[1].y + 100;  points[3].x = points[2].x - 100;  points[3].y = points[2].y; \n // Call the rotation function multiple times  for (int i = 0; i < 4; i++) {  rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);  gdImagePolygon(img, points, 4, black);  } \n gdPoint points2[4];  points2[0].x = (int)width / 3;  points2[0].y = (int)height / 2;  points2[1].x = points2[0].x + 100;  points2[1].y = points2[0].y;  points2[2].x = points2[1].x;  points2[2].y = points2[1].y + 100;  points2[3].x = points2[2].x - 150;  points2[3].y = points2[2].y; \n // Call the rotation function multiple times  for (int i = 0; i < 12; i++) {  //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);  rotateFilledPolygon(500, 200, 30.0, points2, 4);  gdImageFilledPolygon(img, points2, 4, red);  } \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': '在學習過程中，課程在電腦領域的掌握很關鍵，老師帶著我們建立自己的網站，雖然課程都是用英語來跟電腦交流重要，所以需要有足夠的英語詞彙，但在學習中我遇到了一些困難，需要跟組員討論問題點，我在這個學習網路建置、架設網站、使用C語言的圖片。 \n 我在電腦上概論上良多，也感謝老師傳授計畫的理論 \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W15', 'text': '根據  roc_list_coord_flag.7z  程式內容所印出的六組 ABED 等繪製 ROC 國旗白日圖案中的菱形四個關鍵點, 請直接在青天與滿地紅的圖案中, 利用白色作為畫線顏色, 將第二組的 ABED 等四個點的座標, 以直線相連. \n \n \n 先將\xa0 roc_list_coord_flag.7z \xa0下載下來，使用SciTE打開檔案，執行一次可得到一個台灣國旗和六組座標。 \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n void   draw_roc_flag(gdImagePtr img); \n void   draw_white_sun(gdImagePtr img,  int   x,  int   y,  int   size,  int   color); \n \xa0 \n void   connectPoints(gdImagePtr img,  int   x1,  int   y1,  int   x2,  int   y2,  int   color); \n \xa0 \n int   main() { \n // width 3: height 2 \n int   width = 1200; \n // 國旗長寬比為 3:2 \n int   height = ( int )(width * 2.0 / 3.0); \n \xa0 \n gdImagePtr img = gdImageCreateTrueColor(width, height); \n gdImageAlphaBlending(img, 0); \n \xa0 \n draw_roc_flag(img); \n \xa0 \n FILE   *outputFile =  fopen ( "roc_flag_in_gd.png" ,  "wb" ); \n if   (outputFile == NULL) { \n fprintf (stderr,  "Error opening the output file.\\n" ); \n return   1; \n } \n gdImagePngEx(img, outputFile, 9); \n fclose (outputFile); \n gdImageDestroy(img); \n return   0; \n } \n \xa0 \n void   draw_roc_flag(gdImagePtr img) { \n int   width = gdImageSX(img); \n int   height = gdImageSY(img); \n int   red, white, blue; \n // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 \n int   center_x = ( int )(width / 4); \n int   center_y = ( int )(height / 4); \n // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 \n // 由於中央白日圓形的半徑為青天寬度的 1/8 \n // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 \n // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 \n int   sun_radius = ( int )(width / 8); \n // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 \n int   white_circle_dia = sun_radius; \n // 中央藍色圓形半徑為中央白日的 1又 2/15 \n int   blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15; \n // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 \n red = gdImageColorAllocate(img, 255, 0, 0);  // 紅色 \n white = gdImageColorAllocate(img, 255, 255, 255);  // 白色 \n blue = gdImageColorAllocate(img, 0, 0, 149);  // 藍色 \n // 根據畫布大小塗上紅色長方形區域 \n gdImageFilledRectangle(img, 0, 0, width, height, red); \n // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 \n gdImageFilledRectangle(img, 0, 0, ( int )(width / 2.0), ( int )(height / 2.0), blue); \n // 先設法以填色畫出六個白色堆疊菱形 \n draw_white_sun(img, center_x, center_y, sun_radius, white); \n // 利用一個藍色大圓與白色小圓畫出藍色環狀 \n gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); \n gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n \xa0\xa0 \n void   draw_white_sun(gdImagePtr img,  int   center_x,  int   center_y,  int   sun_radius,  int   color) { \n float   deg = M_PI / 180; \n float   sr = sun_radius /  tan (75 * deg); \n int   ax, ay, bx, by, dx, dy, ex, ey; \n \xa0 \n ax = center_x; \n ay = center_y - sun_radius; \n \xa0 \n bx = center_x - sun_radius *  tan (15 * deg); \n by = center_y; \n \xa0 \n ex = center_x; \n ey = center_y + sun_radius; \n \xa0 \n dx = center_x + sun_radius *  tan (15 * deg); \n dy = center_y; \n \xa0 \n for   ( int   i = 1; i <= 6; i++) { \n int   ax1 = ax + sun_radius *  sin (30 * deg * i); \n int   ay1 = ay + sun_radius - sun_radius *  cos (30 * deg * i); \n \xa0 \n int   bx1 = bx + sr - sr *  cos (30 * deg * i); \n int   by1 = by - sr *  sin (30 * deg * i); \n \xa0 \n int   ex1 = ex - sun_radius *  sin (30 * deg * i); \n int   ey1 = ey - (sun_radius - sun_radius *  cos (30 * deg * i)); \n \xa0 \n int   dx1 = dx - (sr - sr *  cos (30 * deg * i)); \n int   dy1 = dy + sr *  sin (30 * deg * i); \n \xa0 \n // 對菱形區域範圍塗色 \n gdImageFilledPolygon(img, (gdPoint[4]){{ax1, ay1}, {bx1, by1}, {ex1, ey1}, {dx1, dy1}}, 4, color); \n \xa0 \n \xa0 \n void   connectPoints(gdImagePtr img,  int   x1,  int   y1,  int   x2,  int   y2,  int   color) { \n gdImageLine(img, x1, y1, x2, y2, color); \n } \n \n \n \n \n \n \n \n \n 生成的座標點 \n A coord: (375,70) B coord: (264,179) E coord: (224,329) D coord: (224,329) A coord: (429,125) B coord: (279,165) E coord: (170,274) D coord: (170,274) A coord: (449,200) B coord: (299,159) E coord: (150,199) D coord: (150,199) A coord: (429,275) B coord: (319,165) E coord: (170,124) D coord: (170,124) A coord: (375,329) B coord: (334,179) E coord: (224,70) D coord: (224,70) A coord: (299,349) B coord: (339,200) E coord: (300,50) D coord: (300,50) \n \n 可加入兩段程式碼 \n // 設置線條的粗度 gdImageSetThickness(img, 3); \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n \n \n \n // 連接四個座標點 \n connectPoints(img, 429, 125, 279, 165, white); \n connectPoints(img, 279, 165, 170, 274, white); \n connectPoints(img, 170, 274, 319, 234, white); \n connectPoints(img, 319, 234, 429, 125, white); \n \n \n \n \n \n \n \n \n #include <stdio.h>  #include <gd.h>  #include <math.h> \n void draw_roc_flag(gdImagePtr img);  void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color); \n int main() {  // width 3: height 2  int width = 1200;  // 國旗長寬比為 3:2  int height = (int)(width * 2.0 / 3.0); \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n draw_roc_flag(img); \n FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  }  gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img);  return 0;  } \n void draw_roc_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, white, blue;  // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處  int center_x = (int)(width / 4);  int center_y = (int)(height / 4);  // gdImageFilledEllipse 需以長寬方向的 diameter 作圖  // 由於中央白日圓形的半徑為青天寬度的 1/8  // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8  // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8  int sun_radius = (int)(width / 8);  // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑  int white_circle_dia = sun_radius;  // 中央藍色圓形半徑為中央白日的 1又 2/15  int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;  // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值  red = gdImageColorAllocate(img, 255, 0, 0); // 紅色  white = gdImageColorAllocate(img, 255, 255, 255); // 白色  blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色  // 根據畫布大小塗上紅色長方形區域  gdImageFilledRectangle(img, 0, 0, width, height, red);  // 青天面積為整面國旗的 1/4, 也是採用長方形塗色  gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);  // 先設法以填色畫出六個白色堆疊菱形  draw_white_sun(img, center_x, center_y, sun_radius, white);  // 利用一個藍色大圓與白色小圓畫出藍色環狀  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n // 設置線條的粗度  gdImageSetThickness(img, 3); \n // 連接四個座標點  connectPoints(img, 429, 125, 279, 165, white);  connectPoints(img, 279, 165, 170, 274, white);  connectPoints(img, 170, 274, 319, 234, white);  connectPoints(img, 319, 234, 429, 125, white);  } \n void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {  float deg = M_PI / 180;  float sr = sun_radius / tan(75 * deg);  int ax, ay, bx, by, dx, dy, ex, ey; \n ax = center_x;  ay = center_y - sun_radius; \n bx = center_x - sun_radius * tan(15 * deg);  by = center_y; \n ex = center_x;  ey = center_y + sun_radius; \n dx = center_x + sun_radius * tan(15 * deg);  dy = center_y; \n for (int i = 1; i <= 6; i++) {  int ax1 = ax + sun_radius * sin(30 * deg * i);  int ay1 = ay + sun_radius - sun_radius * cos(30 * deg * i); \n int bx1 = bx + sr - sr * cos(30 * deg * i);  int by1 = by - sr * sin(30 * deg * i); \n int ex1 = ex - sun_radius * sin(30 * deg * i);  int ey1 = ey - (sun_radius - sun_radius * cos(30 * deg * i)); \n int dx1 = dx - (sr - sr * cos(30 * deg * i));  int dy1 = dy + sr * sin(30 * deg * i); \n // 對菱形區域範圍塗色  gdImageFilledPolygon(img, (gdPoint[4]){{ax1, ay1}, {bx1, by1}, {ex1, ey1}, {dx1, dy1}}, 4, color); \n // 在菱形區域外圍畫線，明確界定菱形範圍  gdImageLine(img, ax1, ay1, bx1, by1, color);  gdImageLine(img, bx1, by1, ex1, ey1, color);  gdImageLine(img, ex1, ey1, dx1, dy1, color);  gdImageLine(img, dx1, dy1, ax1, ay1, color);  }  } \n void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {  gdImageLine(img, x1, y1, x2, y2, color);  } \n 結果如下 \n 製作影片連結 \n', 'tags': '', 'url': 'W15.html'}, {'title': 'Document', 'text': '需下載三個檔案: \n tinyc.7z \xa0 ( 編譯 C 程式, 包含 gd 與 gnuplot) \n python3114_git_putty.7z \xa0 (將近端 cmsimde 啟動並改版後推向 Github 所需的檔案) \n w11_1a.7z \xa0 (ipv6  網路設定檔案) \n', 'tags': '', 'url': 'Document.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教學： \n https://docs.python.org/3/tutorial/ \n Python的平衡介紹 \n 縮排（Python採用4個Spaces縮排，以介面執行範圍） \n 變數（ Python 關鍵字 ） \n 註（#單行註解、三單標註或三雙標註標註多行註解） \n 數 (整數 int(), 浮點數 float()) \n 字串 （字符串） \n print (Python 內建函數,  print() 函數式) \n Python是控制流程工具 \n 為了 \n 如果 \n 範圍 \n 開放 \n 讀 \n 清單 \n 元組 \n 字典 \n 功能 \n 嘗試...除了 \n 休息時間 \n 曾經 \n 類別 \n 此頁面示範如何在同一頁面下加入多個線上Ace編輯器與執行按鈕（ practice_html.txt 動態頁面超檔案）。 \n Practice_html.txt 動態頁面超檔案應該可以在啟動Brython時，設定分割.py檔案放入downloads/py目錄中的參考。 \n 也所有即將出現的對應 html 也使用 Brython 產生，然後編寫為 類別 後，在範例匯入時交叉 實例 引用。 \n <!-- 啟動 Brython -->  \n<script>  \nwindow.onload=function(){  \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}) ;  \n}  \n</腳本> \n 從1累加到100： \n 1加到100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1加到100 cango_三_齒輪 BS蛇 人工智慧俄羅斯區塊鏈 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};